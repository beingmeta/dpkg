#!/bin/sh

logmsg () {
    echo "pkg: $1" >&2;
}

if [ "$1" = all ]; then
    for dir in sources/*; do
	pkg=$(basename ${dir});
	case $pkg in
	    *~)
		;;
	    \#*)
		;;
	    *)
		./getsource ${pkg};
		;;
	esac
    done;
    exit;
elif [ "$1" = update ]; then
    for dir in src/*; do
	if [ -d ${dir}/.git ]; then
	    (cd $dir; git pull; git submodule update; git lfs update);fi;
    done;
    exit;
fi;

if [ -z "${PACKAGING_ROOT}" ]; then
    . packaging.sh
fi;

for opt in $@; do
    case ${opt} in
	channel=*)
	    CHANNEL=${opt#channel=};
	    echo ${CHANNEL} > ${STATE_ROOT}/CHANNEL;
	    ;;
	CHANNEL=*)
	    CHANNEL=${opt#CHANNEL=};
	    echo ${CHANNEL} > ${STATE_ROOT}/CHANNEL;
	    ;;
	branch=*)
	    BRANCH=${opt#branch=}
	    echo ${BRANCH} > ${STATE_ROOT}/BRANCH;
	    ;;
	BRANCH=*)
	    BRANCH=${opt#BRANCH=}
	    echo ${BRANCH} > ${STATE_ROOT}/BRANCH;
	    ;;
	nosource|NOSOURCE)
	    echo ${opt} > ${STATE_ROOT}/NOSOURCE;
	    ;;
	*)
	    echo "Unhandled option ${opt}" >&2;
	    ;;
    esac;
done;

tarfile=${PKGNAME}.tar
srcurl=$(cat sources/${PKGNAME})
srcdir=src/${PKGNAME}
if [ ! -d "${srcdir}" ]; then
    git clone $(cat sources/${PKGNAME}) ${srcdir};
    ("cd" ${srcdir};
     if [ -n "${BRANCH}" ]; then git checkout ${BRANCH}; fi;
     git submodule init;
     git submodule update;
     if [ -z "${GIT_NO_LFS}" ]; then git lfs install; git lfs checkout; fi;);
else ("cd" ${srcdir};
      if [ -n "${BRANCH}" ]; then git checkout ${BRANCH}; fi;
      git pull;
      git submodule init;
      git submodule update;
      if [ -z "${GIT_NO_LFS}" ]; then
	  git lfs fetch;
	  git lfs pull;
      fi;);
fi

KNO_MAJOR=$(knoconfig major);
KNO_MINOR=$(knoconfig minor);
if [ -d ${srcdir}/.git ]; then
    ("cd" ${srcdir}; BRANCH=$(u8_gitbranch)); fi;

if [ -f ${srcdir}/etc/base_version ]; then
    ("cd" ${srcdir}; 
     VERSION=$(u8_gitversion etc/base_version);
     FULL_VERSION=$(u8_gitversion etc/base_version -full);
     BASE_VERSION=$(cat etc/base_version));
elif [ -f ${srcdir}/etc/knomod_version ]; then
    ("cd" ${srcdir}; 
     MOD_VERSION=$(u8_gitversion etc/knomod_version);
     VERSION=${KNO_MAJOR}.${KNO_MINOR}.${MOD_VERSION};
     BASE_VERSION=$(cat etc/knomod_version));
elif [ -f ${srcdir}/version ]; then
    BASE_VERSION=$(cat ${srcdir}/version);
    FULL_VERSION=$(u8_gitversion ${srcdir}/version -full);
    VERSION="$(knoconfig major).${BASE_VERISON}";
fi;
MAJOR_VERSION=$(echo ${BASE_VERSION} | cut - -d'.' -f 1);
MINOR_VERSION=$(echo ${BASE_VERSION} | cut - -d'.' -f 2);

if [ -n "${VERSION}" ]; then echo ${VERSION} > ${STATE_ROOT}/VERSION; fi
if [ -n "${FULL_VERSION}" ]; then echo ${VERSION} > ${STATE_ROOT}/FULL_VERSION; fi
if [ -n "${BRANCH}" ]; then echo ${VERSION} > ${STATE_ROOT}/BRANCH; fi
if [ -n "${MAJOR_VERSION}" ]; then echo ${VERSION} > ${STATE_ROOT}/MAJOR_VERSION; fi
if [ -n "${MINOR_VERSION}" ]; then echo ${VERSION} > ${STATE_ROOT}/MINOR_VERSION; fi

logmsg "Creating source tarball ${tarfile} with version info";

if [ -x ${srcdir}/make_source_tar ]; then
    ("cd" ${srcdir}; ./make_source_tar ../../${tarfile});
else 
    ("cd" ${srcdir}; git archive -o ../../${tarfile} HEAD );
    ("cd" state; tar -rf ../${tarfile} \
        VERSION BASE_VERSION FULL_VERSION VERSION MAJOR_VERSION MINOR_VERSION);
fi;
