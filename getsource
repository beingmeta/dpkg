#!/bin/sh

. packaging.sh
shift;
for opt in $@; do
    case ${opt} in
	channel=*)
	    CHANNEL=${opt#channel=};
	    echo ${CHANNEL} > ${STATE_ROOT}/CHANNEL;
	    ;;
	CHANNEL=*)
	    CHANNEL=${opt#CHANNEL=};
	    echo ${CHANNEL} > ${STATE_ROOT}/CHANNEL;
	    ;;
	branch=*)
	    BRANCH=${opt#branch=}
	    echo ${BRANCH} > ${STATE_ROOT}/BRANCH;
	    ;;
	BRANCH=*)
	    BRANCH=${opt#BRANCH=}
	    echo ${BRANCH} > ${STATE_ROOT}/BRANCH;
	    ;;
	nosource|NOSOURCE)
	    echo ${opt} > ${STATE_ROOT}/NOSOURCE;
	    ;;
	*)
	    echo "Unhandled option ${opt}" >&2;
	    ;;
    esac;
done;

tarfile=${PKGNAME}.tar
srcurl=$(cat sources/${PKGNAME})
srcdir=git/${PKGNAME}
if [ ! -d "${srcdir}" ]; then
    git clone $(cat sources/${PKGNAME}) ${srcdir};
    ("cd" ${srcdir};
     if [ ! -z "${BRANCH}" ]; then git checkout ${BRANCH}; fi;
     git submodule init;
     git submodule update);
else ("cd" ${srcdir};
      if [ ! -z "${BRANCH}" ]; then git checkout ${BRANCH}; fi;
      git pull;
      git submodule init;
      git submodule update);
fi
if [ -f ${srcdir}/etc/base_version ]; then
    ("cd" ${srcdir}; 
     u8_gitbranch > ${STATE_ROOT}/BRANCH;
     u8_gitversion etc/base_version > ${STATE_ROOT}/VERSION;
     u8_gitversion etc/base_version -nobranch > ${STATE_ROOT}/REL_VERSION;
     u8_gitversion etc/base_version -full > ${STATE_ROOT}/FULL_VERSION;
     cp etc/base_version ${STATE_ROOT}/BASE_VERSION;
     cut etc/base_version -d'.' -f 1 > ${STATE_ROOT}/MAJOR_VERSION;
     cut etc/base_version -d'.' -f 2 > ${STATE_ROOT}/MINOR_VERSION);
elif [ -f ${srcdir}/etc/mod_version ]; then
    ("cd" ${srcdir}; 
     u8_gitbranch > ${STATE_ROOT}/BRANCH;
     KNO_MAJOR=$(knoconfig major);
     KNO_MINOR=$(knoconfig minor);
     MOD_VERSION=$(u8_gitversion etc/mod_version);
     VERSION=${KNO_MAJOR}.${KNO_MINOR}.${MOD_VERSION};
     u8_gitversion etc/mod_version -full > ${STATE_ROOT}/FULL_VERSION;
     cp etc/mod_version ${STATE_ROOT}/BASE_VERSION;
     cut etc/mod_version -d'.' -f 1 > ${STATE_ROOT}/MAJOR_VERSION;
     cut etc/mod_version -d'.' -f 2 > ${STATE_ROOT}/MINOR_VERSION);
elif [ -f ${srcdir}/version ]; then
    ("cd" ${srcdir}; u8_gitbranch > ${STATE_ROOT}/BRANCH );
    version=$(knoconfig major).$(cat ${srcdir}/version);
    echo ${version} > ${STATE_ROOT}/BASE_VERSION;
    echo ${version} > ${STATE_ROOT}/FULL_VERSION;
    echo ${version} > ${STATE_ROOT}/REL_VERSION;
    echo ${version} > ${STATE_ROOT}/VERSION;
    knoconfig major > ${STATE_ROOT}/MAJOR_VERSION;
    cut ${srcdir}/version -d'.' -f 1 > ${STATE_ROOT}/MINOR_VERSION;
fi;
logmsg "Creating source tarball ${tarfile} with version info";
if [ -x ${srcdir}/make_source_tar ]; then
    ("cd" ${srcdir}; ./make_source_tar ../../${tarfile});
else 
    ("cd" ${srcdir}; git archive -o ../../${tarfile} HEAD );
    ("cd" state; tar -rf ../${tarfile} \
        BASE_VERSION FULL_VERSION REL_VERSION VERSION MAJOR_VERSION MINOR_VERSION);
fi

