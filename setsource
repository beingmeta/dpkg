#!/bin/sh

UPDATE_CURRENT=${UPDATE_CURRENT:-false};

. ./packaging.sh

branch=
curpkg=
pkgname=$1;
stripped="${pkgname%#*}"
if [ "${stripped}" != "${pkgname}" ]; then
    branch="${pkgname#*#}";
    pkgname=${stripped}
fi;
if [ ! -d "sources/${pkgname}" ]; then
    echo "setsource: ${pkgname} is not a known package name";
    exit;
fi;
if [ ! -f ${STATE_ROOT}/PKGNAME ]; then curpkg=$(cat ${STATE_ROOT}/PKGNAME); else curpkg=; fi
if [ "${curpkg}" = "${pkgname}" ] && ! ${UPDATE_CURRENT}; then
    exit;
fi
if [ -n "${curpkg}" ]; then echo "Switching from ${curpkg} to ${pkgname}"; fi;
PKGNAME=${pkgname};
rm -f ${STATE_ROOT}/*;
echo "${pkgname}" > ${STATE_ROOT}/PKGNAME;
if [ -n "${branch}" ]; then echo "${branch}" > ${STATE_ROOT}/BRANCH; fi;
cp ${PACKAGING_ROOT}/defaults/* ${STATE_ROOT} 2> /dev/null;
if [ -d ${PACKAGING_ROOT}/defaults/${pkgname} ]; then
    cp ${PACKAGING_ROOT}/defaults/${pkgname}/* ${STATE_ROOT} 2> /dev/null;
fi;

if [ -z "${branch}" ]; then
    if [ -f defaults/${pkgname}/BRANCH ]; then
	BRANCH=$(cat defaults/${pkgname}/BRANCH);
	branch=${BRANCH};
    elif [ -f defaults/BRANCH ]; then
	BRANCH=$(cat defaults/BRANCH);
	branch=${BRANCH};
    fi;
fi
if [ -n "${branch}" ]; then echo ${branch} > state/BRANCH; fi;

if [ -n "${DEBUG}" ]; then
    echo setsource PKGNAME=${PKGNAME} BRANCH=${BRANCH} VERSION=${VERSION};
fi;

# Getting repo information

# These are used to probe for specific settings
PROBES=
push_probe() {
    local probe=$1
    if [ -n "${probe}" ] &&
	   [ "${probe}" = "${probe%.}" ] &&
	   [ "${probe}" = "${probe%..*}" ]; then
	if [ -z "${PROBES}" ]; then
	    PROBES="${probe}";
	else PROBES="${probe} ${PROBES}";
	fi;
    fi;
}
push_probe "${PKGNAME}";
push_probe "${PKGNAME}.${DISTRO}";

# Getting information about repos

REPOMAN=
REPO=${USE_REPO}
REPO_LOGIN=${USE_REPO_LOGIN}
REPO_URL=

if [ -z "${REPO}" ] && [ -f defaults/REPO ]; then
    REPO=$(cat defaults/REPO);
fi;

for probe in ${PROBES}; do
    if [ -z "${REPO}" ] && [ -f repos/${probe} ]; then
	REPO=$(cat repos/${probe});
	echo "Found repo host ${REPO} for ${probe}";
    fi;
done;
		   
for probe in ${PROBES}; do
    if [ -z "${REPOMAN}" ] && [ -f repos/${probe}-repoman ]; then
	REPOMAN=$(cat repos/${probe}-repoman);
	echo "Found repo manager ${REPOMAN} for ${probe}";
    fi;
done;
		   
if [ -z "${REPO}" ] && [ -f repos/default ]; then
    REPO=$(cat repos/default);
elif [ -z "${REPO}" ]; then
    REPO=kno
fi;

if [ -z "${REPO}" ]; then
    echo "Warning: No REPO, assuming KNO";
else
    if [ -f repos/${REPO}-login ]; then
	REPO_LOGIN=$(cat "repos/${REPO}-login");
    fi;
    if [ -f "repos/${REPO}.${REPO_SYSTEM}" ]; then
	REPO_URL=$(cat "repos/${REPO}.${REPO_SYSTEM}");
	if [ -f "repos/${REPO}.${REPO_SYSTEM}-login" ]; then
	    REPO_LOGIN=$(cat "repos/${REPO_URL}.${REPO_SYSTEM}-login");
	fi;
    elif [ -f "repos/${REPO}" ]; then
	REPO_URL=$(cat "repos/${REPO}.${REPO_SYSTEM}");
    else
	REPO_URL="${REPO}";
    fi;	
    if [ -z "${REPOMAN}" ] && [ -f "${REPO}-repoman" ]; then
	REPOMAN=$(cat ${REPO}-repoman);
    fi
fi;

if [ -n "${DISTRO}" ]; then
    REPO_URL=$(echo ${REPO_URL} | sed - -e "s/-@DISTRO@/-${DISTRO}/");
    REPO_URL=$(echo ${REPO_URL} | sed - -e "s|/@DISTRO@|/${DISTRO}|");
else
    REPO_URL=$(echo ${REPO_URL} | sed - -e "s/-@DISTRO@/-universal/");
    REPO_URL=$(echo ${REPO_URL} | sed - -e "s|/@DISTRO@|/universal|");
fi;

if [ -n "${VARIANT}" ]; then
    REPO_URL=$(echo ${REPO_URL} | sed - -e "s/-@VARIANT@/-${VARIANT}/");
    REPO_URL=$(echo ${REPO_URL} | sed - -e "s|/@VARIANT@|/${VARIANT}|");
else
    REPO_URL=$(echo ${REPO_URL} | sed - -e "s/-@VARIANT@//");
    REPO_URL=$(echo ${REPO_URL} | sed - -e "s|/@VARIANT@|/stable|");
fi;

if [ -z "${REPOMAN}" ]; then
    REPOMAN="Repository Manager <repoman@beingmeta.com>";
fi;

if [ -z "${REPO_LOGIN}" ] && [ -f repos/default-login ]; then
    REPO_LOGIN=$(cat repos/default-login);
fi;

echo ${REPO_URL} > state/REPO_URL;
echo ${REPO} > state/REPO;
echo ${REPO_LOGIN} > state/REPO_LOGIN;
echo ${REPOMAN} > state/REPOMAN;

dbgmsg "REPO=${REPO} PROBES=${PROBES} REPO_URL=${REPO_URL} REPOMAN=${REPOMAN}";

# Getting sources

tarfile=${PKGNAME}.tar
srcurl=$(cat sources/${PKGNAME}/srcloc)
srcdir=src/${PKGNAME}

if [ "${GIT_PROTOCOL}" = "ssh" ] && [ "${srcurl#https:}" != "${srcurl}" ]; then
    newurl=$(echo ${srcurl} | sed -e 's|^https://|git@|' | sed 's|/|:|')
    if [ "${newurl}" != "${srcurl}" ]; then
        echo "Rewrote ${srcurl} as ${newurl}";
        srcurl="${newurl}";
    fi;
elif [ "${GIT_PROTOCOL}" = "https" ] && [ "${srcurl#git@github.}" != "${srcurl}" ]]; then
    newurl=$(echo ${srcurl} | sed 's|:|/|' | sed -e 's|^git@|https://|')
    if [ "${newurl}" != "${srcurl}" ]; then
        echo "Rewrote ${srcurl} as ${newurl}";
        srcurl="${newurl}";
    fi;
fi

if [ ! -d "${srcdir}" ]; then
    git clone ${srcurl} ${srcdir};
    ("cd" ${srcdir};
     if [ -n "${BRANCH}" ]; then git checkout ${BRANCH}; fi;
     git submodule init;
     git submodule update;
     if [ -z "${GIT_NO_LFS}" ]; then git lfs install; git lfs checkout; fi;);
else ("cd" ${srcdir};
      if [ -n "${BRANCH}" ]; then git checkout ${BRANCH}; fi;
      git pull;
      git submodule init; 
      git submodule update;
      if [ -z "${GIT_NO_LFS}" ]; then
	  git lfs fetch;
	  git lfs pull;
      fi;);
fi

# This should be consistent with branch
if [ -d ${srcdir}/.git ]; then
    BRANCH=$("cd" ${srcdir}; u8_gitbranch);
    echo ${BRANCH} > ${STATE_ROOT}/BRANCH;
fi;
if [ -f ${srcdir}/etc/base_version ]; then
    (cd "${srcdir}";
     echo $(u8_gitversion etc/base_version) > ${STATE_ROOT}/VERSION;
     echo $(u8_gitversion etc/base_version -full) > ${STATE_ROOT}/FULL_VERSION;
     cp etc/base_version ${STATE_ROOT}/BASE_VERSION);
elif [ -f ${srcdir}/etc/knomod_version ]; then
    ("cd" ${srcdir}; 
     MOD_VERSION=$(u8_gitversion etc/knomod_version);
     echo ${KNO_MAJOR}.${KNO_MINOR}.${MOD_VERSION} > ${STATE_ROOT}/VERSION;
     echo $(u8_gitversion etc/knomod_version -full) > ${STATE_ROOT}/FULL_VERSION;
     cp etc/knomod_version ${STATE_ROOT}/BASE_VERSION);
fi;

if [ -f ${srcdir}/dist/libname ]; then
    LIBNAME=$(cat ${srcdir}/dist/libname);
    echo ${LIBNAME} > ${STATE_ROOT}/LIBNAME;
elif [ "${pkgname#kno-}" != "${pkgname}" ]; then
    LIBNAME=${pkgname#kno-};
    echo ${LIBNAME} > ${STATE_ROOT}/LIBNAME;
fi;

import_state;

logmsg "Creating source tarball ${tarfile} with version info";

if [ -x ${srcdir}/make_source_tar ]; then
    ("cd" ${srcdir}; ./make_source_tar ../../work/${tarfile});
else 
    ("cd" ${srcdir}; git archive -o ../../work/${tarfile} HEAD );
    ("cd" state; tar -rf ../work/${tarfile} \
        VERSION BASE_VERSION FULL_VERSION VERSION);
fi;

if [ ! -d output/${PKGNAME} ]; then
    mkdir ${PACKAGING_ROOT}/output/${PKGNAME};
fi;
rm -f ${PACKAGING_ROOT}/output/${PKGNAME}/_.* run/INSTALLED.${PKGNAME};
touch ${PACKAGING_ROOT}/output/${PKGNAME}/_.STARTED;

echo "Package ${PKGNAME}(${BRANCH}) version ${VERSION}"

