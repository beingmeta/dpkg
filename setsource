#!/bin/sh

UPDATE_CURRENT=${UPDATE_CURRENT:-false};

. ./packaging.sh

branch=
curpkg=
pkgname=$1;

stripped="${pkgname%#*}"
if [ "${stripped}" != "${pkgname}" ]; then
    branch="${pkgname#*#}";
    pkgname=${stripped}
fi;
if [ ! -d "${CONFIG_ROOT}/${pkgname}" ]; then
    echo "setsource: ${pkgname} is not a known package name";
    exit;
fi;
if [ -f ${STATE_ROOT}/PKGNAME ]; then
    curpkg=$(cat ${STATE_ROOT}/PKGNAME);
else
    curpkg=;
fi

if ! ([ -n "${curpkg}" ] && [ -d "src/${curpkg}" ] && [ -f "work/${curpkg}.tar" ]); then
    UPDATE_CURRENT=yes
fi;

if [ "${curpkg}" = "${pkgname}" ] && [ ! -n "${UPDATE_CURRENT}" ]; then
    exit;
fi;
if [ -n "${curpkg}" ]; then echo "Switching from ${curpkg} to ${pkgname}"; fi;
PKGNAME=${pkgname};
rm -f ${STATE_ROOT}/*;

echo "${pkgname}" > ${STATE_ROOT}/PKGNAME;
if [ -n "${branch}" ]; then echo "${branch}" > ${STATE_ROOT}/BRANCH; fi;
cp ${PACKAGING_ROOT}/defaults/* ${STATE_ROOT} 2> /dev/null;
if [ -d ${PACKAGING_ROOT}/defaults/${pkgname} ]; then
    cp ${PACKAGING_ROOT}/defaults/${pkgname}/* ${STATE_ROOT} 2> /dev/null;
fi;

if [ -z "${branch}" ]; then
    if [ -f defaults/${pkgname}/BRANCH ]; then
	BRANCH=$(cat defaults/${pkgname}/BRANCH);
	branch=${BRANCH};
    elif [ -f defaults/BRANCH ]; then
	BRANCH=$(cat defaults/BRANCH);
	branch=${BRANCH};
    fi;
fi
if [ -n "${branch}" ]; then echo ${branch} > state/BRANCH; fi;

if [ -n "${DEBUG}" ]; then
    echo setsource PKGNAME=${PKGNAME} BRANCH=${BRANCH} VERSION=${VERSION};
fi;

# Getting repo information

if [ -n "${REPO}" ]; then
    :;
elif [ -f "${CONFIG_ROOT}/${PKGNAME}/repo" ]; then
    REPO=$(cat "${CONFIG_ROOT}/${PKGNAME}/repo");
    echo "${REPO}" > state/REPO;
fi;

if [ -n "${REPOMAN}" ]; then
    :;
elif [ -f "${CONFIG_ROOT}/${PKGNAME}/repoman" ]; then
    REPOMAN=$(cat "${CONFIG_ROOT}/${PKGNAME}/repoman");
    echo "${REPOMAN}" > state/REPOMAN;
else
    REPOMAN="Repository Manager <repoman@beingmeta.com>";
fi;

if [ -n "${REPO}" ]; then
    echo ${REPO} > state/REPO;
fi;
if [ -n "${REPOMAN}" ]; then
    echo ${REPOMAN} > state/REPOMAN;
fi;

# Getting sources

tarfile=${PKGNAME}.tar
srcurl=$(cat ${CONFIG_ROOT}/${PKGNAME}/srcloc)
srcdir=src/${PKGNAME}

if [ "${GIT_PROTOCOL}" = "ssh" ] && [ "${srcurl#https:}" != "${srcurl}" ]; then
    newurl=$(echo ${srcurl} | sed -e 's|^https://|git@|' | sed 's|/|:|')
    if [ "${newurl}" != "${srcurl}" ]; then
        echo "Rewrote ${srcurl} as ${newurl}";
        srcurl="${newurl}";
    fi;
elif [ "${GIT_PROTOCOL}" = "https" ] && [ "${srcurl#git@github.}" != "${srcurl}" ]; then
    newurl=$(echo ${srcurl} | sed 's|:|/|' | sed -e 's|^git@|https://|')
    if [ "${newurl}" != "${srcurl}" ]; then
        echo "Rewrote ${srcurl} as ${newurl}";
        srcurl="${newurl}";
    fi;
fi

if [ ! -d "${srcdir}" ]; then
    git clone ${srcurl} ${srcdir};
    ("cd" ${srcdir};
     if [ -n "${BRANCH}" ]; then git checkout ${BRANCH}; fi;
     git submodule init;
     git submodule update;
     if [ -z "${GIT_NO_LFS}" ]; then git lfs install; git lfs checkout; fi;);
else ("cd" ${srcdir};
      if [ -n "${BRANCH}" ]; then git checkout ${BRANCH}; fi;
      git pull;
      git submodule init;
      git submodule update;
      if [ -z "${GIT_NO_LFS}" ]; then
	  git lfs fetch;
	  git lfs pull;
      fi;);
fi

# This should be consistent with branch
if [ -d ${srcdir}/.git ]; then
    BRANCH=$("cd" ${srcdir}; u8_gitbranch);
    echo ${BRANCH} > ${STATE_ROOT}/BRANCH;
fi;
if [ -f ${srcdir}/etc/base_version ]; then
    (cd "${srcdir}";
     echo $(u8_gitversion etc/base_version) > ${STATE_ROOT}/VERSION;
     echo $(u8_gitversion etc/base_version -full) > ${STATE_ROOT}/FULL_VERSION;
     cp etc/base_version ${STATE_ROOT}/BASE_VERSION);
elif [ -f ${srcdir}/etc/knomod_version ]; then
    ("cd" ${srcdir}; 
     MOD_VERSION=$(u8_gitversion etc/knomod_version);
     echo ${KNO_MAJOR}.${KNO_MINOR}.${MOD_VERSION} > ${STATE_ROOT}/VERSION;
     echo $(u8_gitversion etc/knomod_version -full) > ${STATE_ROOT}/FULL_VERSION;
     cp etc/knomod_version ${STATE_ROOT}/BASE_VERSION);
fi;

if [ -f ${srcdir}/dist/libname ]; then
    LIBNAME=$(cat ${srcdir}/dist/libname);
    echo ${LIBNAME} > ${STATE_ROOT}/LIBNAME;
elif [ "${pkgname#kno-}" != "${pkgname}" ]; then
    LIBNAME=${pkgname#kno-};
    echo ${LIBNAME} > ${STATE_ROOT}/LIBNAME;
fi;

import_state;

logmsg "Creating source tarball ${tarfile} with version info";

if [ -x ${srcdir}/make_source_tar ]; then
    ("cd" ${srcdir}; ./make_source_tar ../../work/${tarfile});
else
    ("cd" ${srcdir}; git archive -o ../../work/${tarfile} HEAD );
    ("cd" state; tar -rf ../work/${tarfile} \
        VERSION BASE_VERSION FULL_VERSION VERSION);
fi;

if [ ! -d output/${PKGNAME} ]; then
    mkdir ${PACKAGING_ROOT}/output/${PKGNAME};
fi;
rm -f ${PACKAGING_ROOT}/output/${PKGNAME}/_.* run/INSTALLED.${PKGNAME};
touch ${PACKAGING_ROOT}/output/${PKGNAME}/_.STARTED;

echo "Package ${PKGNAME}(${BRANCH}) version ${VERSION}"

