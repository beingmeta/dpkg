#!/bin/sh

ACTION=$1; shift;

export SUCCESS;

ALPINE_VERSION=unknown
if [ -f /etc/alpine-release ]; then
    ALPINE_VERSION=$(cat /etc/alpine-release);
fi;

PKG_REVISION=1
if [ ! -f state/PKGNAME ]; then
    echo "apktool with no current package";
    NO_PKGNAME=yes
fi;

if [ -f packaging.sh ]; then
    . ./packaging.sh
else
    script_root=$(dirname $0);
    if [ -f ${script_root}/packaging.sh ]; then
	. ${script_root}/packaging.sh;
    else
	echo "Can't find packaging.sh init";
	exit 2;
    fi;
fi;

logmsg "apktool ACTION=${ACTION} PKGNAME=${PKGNAME} VERSION=${VERSION} BRANCH=${BRANCH}";

export APKINFO=${PACKAGING_ROOT}/apkinfo/
export BUILDRPM=abuild
export REPOROOT=${PACKAGING_ROOT}/staging/

apkprep() {
    local workdir=${1:-work/${PKGNAME}}
    local tarball="${PKGNAME}-${VERSION}.tar.gz"
    local alpine_root="staging/alpine/${ALPINE_VERSION}";
    local build_root="${alpine_root}/${PKGNAME}";
    make_dirs ${build_root};
    (if [ -d ${workdir} ]; then
	 logmsg "Removing existing build directory ${workdir}";
	 rm -rf ${workdir};
     fi) &&
	(logmsg "Creating tarball ${tarball} for ${workdir}") &&
	(rm -rf ${workdir}; mkdir ${workdir}; "cd" ${workdir}; tar xf ../${PKGNAME}.tar) &&
	("cd" work; tar czf ../${build_root}/${tarball} ${PKGNAME} ) &&
	(if [ -f ${APKINFO}/${PKGNAME}/APKBUILD.in ]; then
	     ${TOOLS}/u8_xsubst ${APKINFO}/${PKGNAME}/APKBUILD.in ${build_root}/APKBUILD \
		       "PKGNAME" "${PKGNAME}" \
		       "LIBNAME" "${LIBNAME}" \
		       "VERSION" "${VERSION}" \
		       "MAJOR_VERSION" "${MAJOR_VERSION}" \
		       "MINOR_VERSION" "${MINOR_VERSION}" \
     		       "RELEASE_VERSION" "${RELEASE_VERSION}";
	 elif [ -f ${APKINFO}/${PKGNAME}.APKBUILD.in ]; then
	     ${TOOLS}/u8_xsubst ${APKINFO}/${PKGNAME}.APKBUILD.in ${build_root}/APKBUILD \
		     "PKGNAME" "${PKGNAME}" \
		     "LIBNAME" "${LIBNAME}" \
		     "VERSION" "${VERSION}" \
		     "MAJOR_VERSION" "${MAJOR_VERSION}" \
		     "MINOR_VERSION" "${MINOR_VERSION}" \
     		     "RELEASE_VERSION" "${RELEASE_VERSION}";
	 else
	     echo "No alpine build info for ${PKGNAME} in apkinfo";
	     exit;
	 fi) &&
	("cd" ${build_root}; 
	 abuild clean cleancache &&
	     (abuild cleanpkg 1>/dev/null 2>/dev/null || echo "New build of ${PKGNAME}") &&
	     abuild checksum) &&
	(rm -f output/${PKGNAME}/apk.done) &&
	(logmsg "Establishing workdir ${workdir}"); 
}

apkpackage() {
    local workdir=${1:-work/${PKGNAME}}
    echo "Building package ${PKGNAME} for alpine";
    local tarball="${PKGNAME}-${VERSION}.tar.gz"
    local build_root="staging/alpine/${ALPINE_VERSION}/${PKGNAME}";
    local repo="staging/alpine/${ALPINE_VERSION}/repo";
    ("cd" ${build_root};
     if abuild; then
	 logmsg "built ${PKGNAME}"; 
	 date > apk.done;
     else
	 errmsg "failed build ${PKGNAME}";
     fi);
    if [ -f ${build_root}/apk.done ]; then
	cp ${build_root}/apk.done output/${PKGNAME}/apk.done;
	find ~/packages/${ALPINE_VERSION}/ -name "${PKGNAME}*.apk" | \
	    xargs -L1 -I_pkg cp _pkg output/${PKGNAME}/;
    fi;
}

rpminstall() {
    echo arch=${ARCH} pkgname=${PKGNAME} VERSION=${VERSION};
    local packages="$(ls output/${PKGNAME}/${PKGNAME}*-${VERSION}*.${ARCH}.rpm \
    	  		 output/${PKGNAME}/${PKGNAME}*-${VERSION}*.noarch.rpm \
			 2>/dev/null)";
    ${SUDO} rpm -Uvh --force ${packages};
}
rpminstallsrc() {
    local packages="$(ls output/${PKGNAME}/${PKGNAME}-*-${VERSION}*.${ARCH}.rpm \
    	  		 2>/dev/null)";
    ${SUDO} rpm -Uvh output/${PKGNAME}/${PKGNAME}-${VERSION}*.src.rpm
}

rpmpush() {
    local head_package="output/${PKGNAME}/${PKGNAME}-${VERSION}*.rpm";
    local sub_packages="$(ls output/${PKGNAME}/${PKGNAME}-*-${VERSION}*.rpm 2>/dev/null)";
    ./tools/curlput ${head_package} ${sub_packages};
}

case ${ACTION} in
    start|getsource|source|setsource)
	./setsource $*;
	;;
    prep)
	import_state;
	apkprep $*;
	;;
    package|pkg|mkpkg|makepkg|build)
	import_state;
	if [ -f "output/${PKGNAME}/apk.done" ]; then
	    :;
	elif [ "${LOGFILE}" = none ]; then
	    apkpackage $@;
	elif [ -n "${LOGFILE}" ]; then
	    apkpackage $* > ${LOGFILE};
	else
	    rm -f output/${PKGNAME}/LOG
	    apkpackage $* 1> output/${PKGNAME}/LOG 2> output/${PKGNAME}/LOG;
	fi;
	if [ -f output/${PKGNAME}/apk.done ]; then
	    ls -l output/${PKGNAME}/
	else
	    echo "Error: Packaging failed!";
	    exit 2;
	fi;
	;;
    make)
	./setsource ${PKGNAME} && import_state && rpmprep ${PKGNAME} && apkpackagels / ${PKGNAME};
	;;
    install)
	import_state && rpminstall $*;
	;;
    push)
	import_state && rpmpush $*;
	;;
    clean)
	echo Removing "${PKGNAME}-${VERSION}.tar.gz"
	rm -f "${PKGNAME}-${VERSION}.tar.gz"
	;;
    update)
	./setsource ${PKGNAME} ${BRANCH}
	;;
    *)
	logmsg "Unknown command '${ACTION}'";
	;;
esac
