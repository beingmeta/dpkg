#!/bin/sh

ACTION=$1; shift;

PKG_REVISION=1
if [ ! -f state/PKGNAME ]; then
    echo "rpmtool with no current package";
    NO_PKGNAME=yes
fi;

if [ -f packaging.sh ]; then
    . ./packaging.sh
else
    script_root=$(dirname $0);
    if [ -f ${script_root}/packaging.sh ]; then
	. ${script_root}/packaging.sh;
    else
	echo "Can't find packaging.sh init";
	exit 2;
    fi;
fi;

#echo "rpmtool $$ $(pwd) ACTION=${ACTION} PKGNAME=${PKGNAME} VERSION=${VERSION} BRANCH=${BRANCH}";
logmsg "rmptool ACTION=${ACTION} PKGNAME=${PKGNAME} VERSION=${VERSION} BRANCH=${BRANCH}";

export RPMINFO=${PACKAGING_ROOT}/rpminfo
export BUILDRPM=$(which rpmbuild)
export RPMDIR=${PACKAGING_ROOT}/staging/
export RPMFLAGS=

yum_version() {
    local pkg=$1;
    local info=$(dnf info --installed ${pkg} | grep "Version *:");
    local version=${info#*:};
    echo ${version};
}

rpmprep() {
    local workdir=work/${PKGNAME}
    local tarball="${PKGNAME}-${VERSION}.tar.gz"
    local rpm_root="${PKGNAME}-${VERSION}";
    local spec_file="";
    (if [ -d ${workdir} ]; then
	 logmsg "Removing existing build directory ${workdir}";
	 rm -rf ${workdir};
     fi) &&
	(logmsg "Creating tarball ${tarball} for ${rpm_root}") &&
	(rm -rf work/${rpm_root}; mkdir work/${rpm_root};
	 "cd" work/${rpm_root};
	 tar xf ../${PKGNAME}.tar;
	 find . -name "*.spec" -exec rm '{}' \;) &&
	(for suffix in ${DISTRO}.${CHANNEL}.${VARIANT} \
				${DISTRO}.${CHANNEL} ${DISTRO}.${VARIANT} \
				${DISTRO} ${CHANNEL} ${VARIANT}; do
	     if [ -n "${spec_file}" ]; then
		 :;
	     elif [ -f ${RPMINFO}/${PKGNAME}/${PKGNAME}.spec.in.${suffix} ]; then
		 spec_file=${RPMINFO}/${PKGNAME}/${PKGNAME}.spec.in.${suffix};
	     elif [ -f ${RPMINFO}/${PKGNAME}.spec.in.${suffix} ]; then
		 spec_file=${RPMINFO}/${PKGNAME}/${PKGNAME}.spec.in.${suffix};
	     fi;
	 done;
	 if [ -n "${spec_file}" ]; then
	     :;
	 elif [ -f ${RPMINFO}/${PKGNAME}/${PKGNAME}.spec.in ]; then
	     spec_file=${RPMINFO}/${PKGNAME}/${PKGNAME}.spec.in;
	 elif [ -f ${RPMINFO}/${PKGNAME}.spec.in ]; then
	     spec_file=${RPMINFO}/${PKGNAME}/${PKGNAME}.spec.in;
	 else
	     echo "No RPM info for ${PKGNAME}";
	     exit;
	 fi;
	 logmsg "Using spec file ${spec_file}";
	 ${TOOLS}/u8_xsubst ${spec_file} work/${rpm_root}/${PKGNAME}.spec \
		 "PKGNAME" "${PKGNAME}" \
		 "LIBNAME" "${LIBNAME}" \
		 "VERSION" "${VERSION}" \
		 "MAJOR_VERSION" "${MAJOR_VERSION}" \
		 "MINOR_VERSION" "${MINOR_VERSION}" \
     		 "RELEASE_VERSION" "${RELEASE_VERSION}") &&
	("cd" work; tar cf ${tarball} ${rpm_root}) &&
	(logmsg "Establishing workdir ${workdir}") &&
	(mv work/${rpm_root} ${workdir}); 
}

rpmpackage() {
    local workdir=${1:-work/${PKGNAME}};
    local staging_dir="${RPMDIR}";
    local arch_dir=$(mkpath "${staging_dir}" "${ARCH}");
    local noarch_dir=$(mkpath "${staging_dir}" "noarch");
    local output_dir=$(mkpath "output" "${PKGNAME}");
    local all_files=;
    ("cd" ${workdir}; # --noclean
     ${BUILDRPM} ${RPMFLAGS}  \
		 --define="_rpmdir ${RPMDIR}" \
		 --define="_srcrpmdir ${RPMDIR}" \
		 --nodeps -ta ../${PKGNAME}-${VERSION}.tar.gz) &&
	(if [ -n "${GPGID}" ]; then
	     rpm --addsign --define="_gpg_name ${GPGID}" \
		 --define="__gpg_sign_cmd ${RPMGPG}" \
		 ${RPMDIR}/${PKGNAME}-${VERSION}*.src.rpm \
		 ${arch_dir}/${PKGNAME}*-${VERSION}*.${ARCH}.rpm;
	 fi) &&
	(touch ${output_dir}/rpm.done) &&
	(all_files=$(ls ${RPMDIR}/${PKGNAME}-${VERSION}*.src.rpm \
			${arch_dir}/${PKGNAME}*-${VERSION}*.${ARCH}.rpm \
			${noarch_dir}/${PKGNAME}*-${VERSION}*.noarch.rpm \
			2>/dev/null);
	 mv ${all_files} ${output_dir});
}
rpminstall() {
    local instpkgs=$(cat rpminfo/${PKGNAME}.install 2>/dev/null||echo ${PKGNAME});
    local packages=;
    local matches=;
    for pkgname in ${instpkgs}; do
	matches="$(ls output/${PKGNAME}/${pkgname}-${VERSION}*.${ARCH}.rpm \
    	  		 output/${PKGNAME}/${pkgname}-${VERSION}*.noarch.rpm \
			 2>/dev/null)";
	if [ -n "${matches}" ]; then packages="${packages} ${matches}"; fi;
    done;
    ${SUDO} rpm -Uvh --force ${packages};
}
rpminstallsrc() {
    local packages="$(ls output/${PKGNAME}/${PKGNAME}-*-${VERSION}*.${ARCH}.rpm \
    	  		 2>/dev/null)";
    ${SUDO} rpm -Uvh output/${PKGNAME}/${PKGNAME}-${VERSION}*.src.rpm
}

rpmrequire() {
    local instpkgs=$(cat rpminfo/${PKGNAME}.install 2>/dev/null||echo ${PKGNAME});
    local files=;
    local matches=;
    for pkgname in ${instpkgs}; do
	matches="$(ls output/${PKGNAME}/${pkgname}-${VERSION}*.${ARCH}.rpm \
    	  		 output/${PKGNAME}/${pkgname}-${VERSION}*.noarch.rpm \
			 2>/dev/null)";
	if [ -n "${matches}" ]; then files="${files} ${matches}"; fi;
    done;
    if [ -n "${files}" ]; then
	${SUDO} rpm -Uvh --force ${files};
    elif ${SUDO} dnf install ${instpkgs};
	 echo "Installed ${PKGNAME} from repo: ${instpkgs}";
    else 
	echo echo "#!!# (${PKGNAME} Failed to install ${instpkgs}"
	( (./pkg prep) && (./pkg make) && (./pkg install) ) ||
	    (echo echo "#!!# (${PKGNAME} Failed to build/install ${PKGNAME}");
}

rpmpush() {
    local head_package="output/${PKGNAME}/${PKGNAME}-${VERSION}*.rpm";
    local sub_packages="$(ls output/${PKGNAME}/${PKGNAME}-*-${VERSION}*.rpm 2>/dev/null)";
    ./tools/curlput ${head_package} ${sub_packages};
}

case ${ACTION} in
    start|getsource|source|setsource)
	./setsource $*;
	;;
    prep)
	import_state;
	rpmprep $*;
	;;
    package|pkg|mkpkg|makepkg|build)
	import_state;
	if [ "${LOGFILE}" = none ]; then
	    rpmpackage $@;
	elif [ -n "${LOGFILE}" ]; then
	    rpmpackage $* > ${LOGFILE};
	else
	    rm -f output/${PKGNAME}/LOG
	    rpmpackage $* 1> output/${PKGNAME}/LOG 2> output/${PKGNAME}/LOG;
	fi;
	if [ -f output/${PKGNAME}/rpm.done ]; then
	    ls -l output/${PKGNAME}/
	else
	    echo "Error: Packaging failed!";
	    exit 2;
	fi;
	;;
    make)
	./setsource ${PKGNAME} && import_state && rpmprep && rpmpackage;
	;;
    install)
	import_state;
	INSTALLED=$(cat run/INSTALLED.${PKGNAME} 2>/dev/null||echo)
	if [ "${INSTALLED}" != "${FULL_VERSION}" ]; then
	    rpminstall $* && echo ${FULL_VERSION} > run/INSTALLED.${PKGNAME};
	else
	    echo "The currently built version of ${PKGNAME} is already installed!";
	fi;
	;;
    push)
	import_state;
	PUSHED=$(cat output/${PKGNAME}/_.PUSHED 2>/dev/null||echo)
	XVERSION="${VERSION}-${CHANNEL}"
	if [ $# -gt 0 ] || [ "${PUSHED}" != "${XVERSION}" ]; then
	    rpmpush $* && echo ${XVERSION} > output/${PKGNAME}/_.PUSHED;
	else
	    echo "Already pushed ${PKGNAME} version ${XVERSION}";
	fi;
	;;
    clean)
	echo Restoring to pre-prep state
	rm -rf "work/${PKGNAME}-${VERSION}.tar.gz" "work/${PKGNAME}"
	;;
    update|latest|pushup)
	import_state;
	if [ -f output/${PKGNAME}/FULL_VERSION ] &&
	       [ "${FULL_VERSION}" = "$(cat output/${PKGNAME}/FULL_VERSION)" ]; then
	    # If the version we are building is already built in `output`, check if it's installed
	    INSTALLED=$(cat run/INSTALLED.${PKGNAME} 2>/dev/null||echo)
	    if [ "${INSTALLED}" != "${FULL_VERSION}" ]; then
		rpminstall $* && echo ${XVERSION} > run/INSTALLED.${PKGNAME};
	    fi;
	fi;
	instpkgs=$(cat rpminfo/${PKGNAME}.install 2>/dev/null||echo ${PKGNAME});
	(${SUDO} dnf -yq upgrade ${instpkgs}) || (echo "Upgrade of ${instpkgs} failed");
	YUMVERSION=$(yum_version ${PKGNAME});
	# Check whether we need to build the package, then do it
	if [ "${YUMVERSION}" != "${VERSION}" ]; then
	    ./setsource ${PKGNAME} && rpmprep && rpmpackage && rpminstall &&
 		(if [ ${ACTION} = "pushup" ]; then rpmpush ${PKGNAME}; fi);
	else
	    echo "##### COOL! The package ${PKGNAME} for ${DISTRO} doesn't need to be updated";
	fi;
	;;
    *)
	logmsg "Unknown command '${ACTION}'";
	;;
esac
