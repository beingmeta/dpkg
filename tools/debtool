#!/bin/sh

ACTION=$1; shift;

PKG_REVISION=1

if [ -f packaging.sh ]; then
    . ./packaging.sh
else
    script_root=$(dirname $0);
    if [ -f ${script_root}/packaging.sh ]; then
	. ${script_root}/packaging.sh;
    else
	echo "Can't find packaging.sh init";
	exit 2;
    fi;
fi;

DEBINFO=${PACKAGING_ROOT}/debinfo

debprep() {
    local workdir=${1:-${PKGNAME}}
    if [ -d ${workdir} ]; then
	logmsg "Removing existing build directory ${workdir}";
	rm -rf ${workdir};
    fi
    logmsg "Creating build directory at '${workdir}'"
    mkdir ${workdir}; ("cd" ${workdir}; tar xf ../${PKGNAME}.tar);
    if [ ! -f state/NOSOURCE ]; then
	srctar=${PKGNAME}_${VERSION}.orig.tar.gz;
	logmsg "Creating source tarball at ${srctar}";
	tar -czf ${srctar} ${workdir};
    fi;
    if [ -d ${workdir}/debian ]; then rm -rf ${workdir}/debian; fi
    mkdir ${workdir}/debian
    logmsg "Setting up ${workdir}/debian";
    ("cd" ${DEBINFO}/${PKGNAME};
     for file in *; do
	 if [ ${file} != ${file%.ex} ]; then
	     # skip .ex files
	     :
	 elif [ -d ${file} ]; then
	     cp -r ${file} ../../${workdir}/debian;
	 elif [ "${file%.prop}" != "${file}" ]; then
	     :;
	 else
	     echo "Generating ../../${workdir}/debian/${file} from ${file}" > ../../output/${PKGNAME}/LOG;
	     ${TOOLS}/u8_xsubst -q ${file} ../../${workdir}/debian/${file} \
		       "VERSION" "${VERSION}"              \
		       "CHANNEL" "${CHANNEL}"                  \
		       "BRANCH" "${BRANCH}"                    \
		       "DISTRO" "${DISTRO}"                    \
		       "KNO_VERSION" "${KNO_VERSION}"          \
		       "KNO_MAJOR" "${KNO_MAJOR}"              \
		       "KNO_MINOR" "${KNO_MINOR}"              \
		       "BASE_VERSION" "${BASE_VERSION}"        \
		       "FULL_VERSION" "${FULL_VERSION}"        \
		       "MINOR_VERSION" "${MINOR_VERSION}"      \
		       "MAJOR_VERSION" "${MAJOR_VERSION}";
	 fi;
     done);
    for custom in ${workdir}/debian/*.${DISTRO} ${workdir}/debian/*.${CHANNEL}; do
	if [ -f ${custom} ]; then
	    base=$(basename ${custom});
	    mv ${custom} ${workdir}/debian/${base};
	    rm ${workdir}/debian/${base}.*;
	fi;
    done;
    debchangelog 1> ${workdir}/debian/changelog;
}

debpackage() {
    local output_dir="output/${PKGNAME}/";
    local buildopt=
    if [ -f state/NOSOURCE ]; then buildopt=-b; fi
    local workdir="${1:-${PKGNAME}}"
    ("cd" ${workdir};
     dpkg-buildpackage ${buildopt} -us -uc -sa -rfakeroot)
    if [ ! -z "${GPGID}" ]; then
	#    debsign -p${GPG} --re-sign -k${GPGID} dist/kno_@KNO_VERSION@*.changes && touch $@;
	debsign --re-sign -k${GPGID} ${PKGNAME}_${VERSION}*.changes
    fi;
    rm -f ${output_dir}/FILES ${output_dir}/${PKGNAME}*;
    local changes_file="$(ls ${PKGNAME}_${VERSION}*.changes)";
    grep "^ [0-9a-f]* [0-9]* [^ ]*$" ${changes_file} | \
    	cut - -d' ' -f 4 > ${output_dir}/FILES;
    for file in $(cat ${output_dir}/FILES); do
	if [ -f "${file}" ]; then mv ${file} ${output_dir}; fi; done;
    mv ${changes_file} ${output_dir};
}

debinstall() {
    local decl_packages="$(cat debinfo/${PKGNAME}/install.prop 2>/dev/null)";
    local head_package=""
    local install_packages=""
    echo decl_packages=${decl_packages};
    if [ -z "${decl_packages}" ]; then 
	head_package="output/${PKGNAME}/${PKGNAME}_${VERSION}*.deb";
	install_packages="${head_package} $(ls output/${PKGNAME}/*-*_${VERSION}*.deb 2>/dev/null)";
	${SUDO} dpkg -i ${install_packages};
    else
	for package in ${decl_packages}; do
	    match="$(ls output/${PKGNAME}/${package}_${VERSION}*.deb 2>/dev/null)";
	    if [ -n "${match}" ]; then
		${SUDO} dpkg -i ${match}
	    fi;
	done;
    fi;
}

debpush() {
    local head_package="output/${PKGNAME}/${PKGNAME}_${VERSION}*.deb";
    local sub_packages="$(ls output/${PKGNAME}/${PKGNAME}-*_${VERSION}*.deb 2>/dev/null)";
    ${TOOLS}/curlpush ${head_package} ${sub_packages};
}

debchangelog() {
    local date="$(date -R)";
    local status_adj="${STATUS}";
    if [ -z "${status_adj}" ]; then status_adj=normal; fi
#    echo ${PKGNAME} \(${VERSION}-${DPKG_REVISION}-${CODENAME}\) ${codename} ${STATUS}\; urgency=${URGENCY}
#    echo ${PKGNAME} \(${VERSION}-${CODENAME}\) ${codename} ${STATUS}\; urgency=${URGENCY}
    echo ${PKGNAME} \(${VERSION}-${CODENAME}\) ${CODENAME} ${STATUS}\; urgency=${URGENCY}
    echo
    echo "  * ${GITID} ${STATUSADJ} point release of ${PKGNAME} (branch '${BRANCH}') for ${CODENAME} (${FULL_VERSION})"
    echo
    echo " -- ${REPOMAN}  ${date}"
    echo
}

saveout() {
    local saveto="${1:-${PKGNAME}.out}";
    local head_package="$(ls ${PKGNAME}_${VERSION}*.deb 2>/dev/null)";
    local sub_packages="$(ls ${PKGNAME}-*_${VERSION}*.deb 2>/dev/null)";
    local files="$(ls ${PKGNAME}_${VERSION}* 2>/dev/null)";
    if [ ! -d ${saveto} ]; then mkdir ${saveto}; fi
    mv ${head_package} ${sub_packages} ${files} ${saveto};
}

cleanout() {
    local head_package="$(ls ${PKGNAME}_${VERSION}*.deb 2>/dev/null)";
    local sub_packages="$(ls ${PKGNAME}-*_${VERSION}*.deb 2>/dev/null)";
    local files="$(ls ${PKGNAME}_${VERSION}* 2>/dev/null)";
    rm -f ${head_package} ${sub_packages} ${files};
}

case ${ACTION} in
    start|getsource|setsource|source)
	./setsource $*;
	;;
    prep)
	debprep $*;
	;;
    package|pkg|mkpkg|makepkg)
	if [ "${LOGFILE}" = none ]; then
	    debpackage $@;
	elif [ -n "${LOGFILE}" ]; then
	    debpackage $* > ${LOGFILE};
	else
	    rm -f output/${PKGNAME}/LOG
	    debpackage $* > output/${PKGNAME}/LOG;
	fi;
	ls -l output/${PKGNAME}/
	;;
    make)
	./setsource ${PKGNAME} && debprep ${PKGNAME} && debpackage ${PKGNAME};
	;;
    install)
	debinstall $*;
	;;
    push)
	debpush $*;
	;;
    update)
	./setsource ${PKGNAME} ${BRANCH}
	;;
    clean)
	rm -rf ${PKGNAME} ${PKGNAME}.tar;
	;;
    saveout)
	saveout $*;
	;;
    *)
	logmsg "Unknown command '${ACTION}'";
	;;
esac
