#!/bin/sh

UPDATE_CURRENT=false

pkg_usage() {
    echo "Usage: pkg *command* [*pkgname*]";
    echo "       Applies *command* to *pkgname* or the most recently specified *pkgname* if not provided";
    echo "       *command* can be: build, prep, require, install, or push";
    echo "          + build creates an OS package (e.g. rpm, deb, apk)"
    echo "          + prep sets up work/*pkgname* for building the OS package"
    echo "          + require installs the latest *pkgname*, building it if needed"
    echo "          + install the latest *pkgname*, it if has been built"
    echo "Usage: pkg bundle (*command* [*pkgname*]+)*";
    echo "       Applies a series of commands to a series of packages, in command line order";
    echo "Usage: pkg *update*|*start*|*setup* [*pkgname*]";
    echo "       Checks out or updates sources for *pkgname*, or all packages if not specified";
    echo "Usage: pkg *param*";
    echo "       outputs the build config parameter *param*";
    echo "Usage: pkg *param*=*value*";
    echo "       sets the build config parameter *param* to *value*";
}

if [ $# -eq 0 ]; then
    pkg_usage;
    exit;
else case $1 in
	 help|usage)
	     pkg_usage;
	     exit;
	     ;;
     esac;
fi;

# Update the packaging directory at least once
if [ ! -f .updated ]; then
    git pull && touch .updated;
    exec $0 $*;
fi;

. ./packaging.sh

case $1 in
    start|source)
	if [ -n "$2" ] && [ -f sources/$2 ]; then
	    ./setsource $2;
	    rm -rf work/$2;
	    exit;
	else
	    echo "Usage: pkg start *pkgname*";
	    exit;
	fi;
	;;
    setup)
	if [ $# -eq 1 ]; then
	    for src in sources/*; do
		if [ -f ${src} ] && [ "${src%~}" = "${src}" ]; then
		    # Skip versioned files
		    name=$(basename ${src});
		    ./setsource ${name};
		fi;
	    done;
	else
	    for src in $@; do
		if [ -f "sources/${src}" ]; then
		    ./setsource ${src};
		else echo "Not a known package: ${src}";
		fi;
	    done;
	fi;
	exit;
	;;
    pull|getsources|update_sources)
	if [ $# -eq 1 ]; then
	    for src in sources/*; do
		name=$(basename ${src});
		if [ "${name%~}" = "${name}" ]; then ./setsource ${name}; fi;
	    done;
	else
	    for src in $@; do
		if [ -f "sources/${src}" ]; then
		    ./setsource ${src};
		else echo "Not a known package: ${src}";
		fi;
	    done;
	fi;	
	exit;
	;;
    cleanup)
	if [ $# -eq 1 ]; then
	    for src in sources/*; do
		name=$(basename ${src});
		if [ "${name%~}" = "${name}" ]; then
		    files=$(ls ${name}*.tar ${name}*.tar.gz 2>/dev/null);
		    if [ -n "${files}" ]; then 
			echo "Removing ${files}"; 
			rm ${files};
		    fi;
		fi;
	    done;
	else
	    for name in $@; do
		if [ -f "sources/${name}" ]; then
		    files=$(ls ${name}*.tar ${name}*.tar.gz 2>/dev/null);
		    if [ -n "${files}" ]; then 
			echo "Removing ${files}"; 
			rm ${files};
		    fi;
		else echo "Not a known package: ${name}";
		fi;
	    done;
	fi;	
	exit;
	;;
    default)
	arg=$2
	if [ "${arg%=*}" = "${arg}" ]; then
	    arg=$(echo ${arg} | tr [a-z] [A-Z]);
	    if [ -f defaults/${arg} ]; then
		cat defaults/${arg};
	    fi;
	else
	    varname=${2%=*};
	    valstring=${2#*=};
	    varname=$(echo ${varname} | tr [a-z] [A-Z]);
	    echo "Setting default for ${varname} to ${valstring}";
	    echo ${valstring} > state/${varname};
	    exit;
	fi;
	;;
esac;

if [ $# -eq 1 ]; then
    if [ -f sources/$1 ]; then
	./setsource $1;
    elif [ -z "${PKGNAME}" ]; then
	echo "No current package";
	exit;
    else
	./do_pkgop ${PKGNAME} $1
    fi;
fi;

if [ -n "${SKIP}" ]; then
    for pkg in ${SKIP}; do 
	if [ -f sources/${pkg} ]; then
	    touch sources/${pkg}.skip;
	else
	    echo "Bad SKIP arg ${pkg}";
	fi;
    done;
fi;

pkg_op( ) {
    local pkgop="$1";
    local pkglist="$2";
    if [ -n "${pkgop}" ] && [ -n "${pkglist}" ]; then
	for pkg in ${pkglist}; do
	    logmsg "Applying ${pkgop} to ${pkg}";
	    ./do_pkgop ${pkg} ${pkgop} 
	done;
    fi;
}    

get_all_pkgs( ) {
    local all='libu8 kno';
    local p='';
    local nm='';
    for p in sources/*; do
	if  [ "${p%~}" = "${p}" ]; then
	    nm=$(basename ${p});
	    if ! ( [ "$nm" = "libu8" ] || [ "$nm" = "kno" ] ); then
		all="${all} ${nm}"; fi;
	fi;
    done;
    echo ${all};
}

handle_bundle( ) {
    local op='';
    local pkgs='';
    local elt='';
    local varname='';
    local valstring='';
    echo "Handle bundle $@";
    for elt in $*; do
	echo "Processing '${elt}'";
	case ${elt} in
	    require|make|make+|make++|prep|build|install|push|update|latest|remake|rebuild|remake|remake+|remake++|pushup)
		pkg_op ${op} "${pkgs}"; 
		op=${elt};
		pkgs='';
		;;
	    all|forall)
		if [ -z "${pkgs}" ]; then
		    pkgs=$(get_all_pkgs);
		    else pkgs="${pkgs} ${elt}";
		fi;
		;;
	    *=*)
		pkg_op ${op} "${pkgs}"; 
		pkgs="";
		varname=${elt%=*};
		valstring=${elt#*=};
		varname=$(echo ${varname} | tr [a-z] [A-Z]);
		echo "Setting state ${varname} to ${valstring}";
		echo ${valstring} > defaults/${varname};
		;;
	    *)
		if [ -f sources/${elt} ]; then
		    if [ -z "${pkgs}" ]; then
			pkgs="${elt}";
		    else pkgs="${pkgs} ${elt}"; fi;
		else
		    pkg_op ${op} "${pkgs}"; 
		    pkgs="";
		    upper=$(echo $1 | tr [a-z] [A-Z]);
		    if [ -f state/${upper} ]; then
			cat state/${upper};
			exit;
		    else
			echo "Unknown state parameter ${upper}";
		    fi;
		fi;
		;;
	esac;
    done;
    echo "pkg_op ${op} ${pkgs}";
    pkg_op ${op} "${pkgs}"; 
}

handle_bundle $@
